#!/bin/sh
# Cero3 Shaper
# A cake shaper and AQM solution that allows several diffserv marking schemes
# for ethernet gateways

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#       Copyright (C) 2012-5 Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller


#sm: TODO pass in the cake diffserv keyword

. ${SQM_LIB_DIR}/defaults.sh
QDISC=cake

# INGRESS_CAKE_OPTS and EGRESS_CAKE_OPTS are defined in defaults.sh now

LSUBNET="192.168.10.0/24"


ipt_setup() {

    ipt -t mangle -N QOS_MARK_${IFACE}

    sqm_debug "cake does all the diffserv work - no need for iptables rules"

    # Turn it on. Preserve classification if already performed

    #sm: Since we use an IFB for ingress shaping the TOS bits will not be re-mapped/squashed
    #	before reaching cake, so we need to tell cake to ignore them, iptables will squash them later.
    if [ "$SQUASH_DSCP" = "1" ]
    then
	sqm_debug "Squashing differentiated services code points (DSCP) from ingress."
	INGRESS_CAKE_OPTS=besteffort # someday squash
	ipt -t mangle -I PREROUTING -i $IFACE -m dscp ! --dscp 0 -j DSCP --set-dscp-class be
    else
	sqm_debug "Keeping differentiated services code points (DSCP) from ingress."
	#INGRESS_CAKE_OPTS="diffserv4"
	ipt -t mangle -A PREROUTING -i $IFACE -m mark --mark 0x00/${IPT_MASK} -g QOS_MARK_${IFACE}
    fi

    ipt -t mangle -A POSTROUTING -o $IFACE -m mark --mark 0x00/${IPT_MASK} -g QOS_MARK_${IFACE}

    # Not sure if this will work. Encapsulation is a problem period
    ipt -t mangle -I PREROUTING -i vtun+ -p tcp -j MARK --set-mark 0x2/${IPT_MASK} # tcp tunnels need ordering

    ## Emanating from router, do a little more optimization
    ## but don't bother with it too much.
    #sm: actually just keep this as reference in case it should be needed, our 1-tier shaper scripts
    # work quite well without that "optimization"
    #ipt -t mangle -A OUTPUT -p udp -m multiport --ports 123,53 -j DSCP --set-dscp-class AF42
}


egress() {

    BL_RATE=`expr $UPLINK / 2`

    $TC qdisc del dev $IFACE root 2> /dev/null

    $TC qdisc add dev $IFACE root handle 1: $( get_stab_string ) cake bandwidth ${UPLINK}kbit $( get_cake_lla_string ) ${EGRESS_CAKE_OPTS} ${EQDISC_OPTS}
    $TC class add dev $IFACE parent 1: classid 1:1 cake bandwidth ${BL_RATE}kbit $( get_cake_lla_string ) ${EGRESS_CAKE_OPTS} ${EQDISC_OPTS}

    $TC filter add dev $IFACE parent 1: protocol ip prio 16 u32 match ip src ${LSUBNET} flowid 1:1

    #diffserv $IFACE
}


ingress() {

    BL_RATE=`expr $DOWNLINK / 2`

    $TC qdisc del dev $IFACE handle ffff: ingress 2> /dev/null
    $TC qdisc add dev $IFACE handle ffff: ingress

    $TC qdisc del dev $DEV root  2> /dev/null

    if [ "$SQUASH_INGRESS" = "1" ]
    then
	sqm_debug "Do not perform DSCP based filtering on ingress. (1-tier classification)"
	# Revert to no dscp based filtering
	INGRESS_CAKE_OPTS="besteffort"
	$TC qdisc add dev $DEV root handle 1: $( get_stab_string ) cake bandwidth ${DOWNLINK}kbit $( get_cake_lla_string ) ${INGRESS_CAKE_OPTS} ${IQDISC_OPTS}
	$TC class add dev $DEV parent 1: classid 1:1 cake bandwidth ${BL_RATE}kbit $( get_cake_lla_string ) ${INGRESS_CAKE_OPTS} ${IQDISC_OPTS}
    else
	sqm_debug "Perform DSCP based filtering on ingress. (multi-tier classification)"
	$TC qdisc add dev $DEV root handle 1: $( get_stab_string ) cake bandwidth ${DOWNLINK}kbit $( get_cake_lla_string ) ${INGRESS_CAKE_OPTS} ${IQDISC_OPTS}
	$TC class add dev $DEV parent 1: classid 1:1 cake bandwidth ${BL_RATE}kbit $( get_cake_lla_string ) ${INGRESS_CAKE_OPTS} ${IQDISC_OPTS}
    fi

    $IP link set dev $DEV up

    # redirect all IP packets arriving in $IFACE to ifb0

    $TC filter add dev $IFACE parent ffff: protocol all prio 10 u32 \
	match u32 0 0 flowid 1:1 action mirred egress redirect dev $DEV

    $TC filter add dev $IFACE parent 1: protocol ip prio 16 u32 match ip dst ${LSUBNET} flowid 1:1
}

sqm_start() {
    [ -n "$IFACE" ] || return 1
    do_modules
    verify_qdisc $QDISC "cake" || return 1
    sqm_debug "Starting ${SCRIPT}"

    [ -z "$DEV" ] && DEV=$( get_ifb_for_if ${IFACE} )

    ipt_setup

    if [ "${UPLINK}" -ne 0 ];
    then
        egress
        sqm_debug "egress shaping activated"
    else
        sqm_debug "egress shaping deactivated"
        $TC qdisc del dev ${IFACE} root 2> /dev/null
    fi
    if [ "${DOWNLINK}" -ne 0 ];
    then
	verify_qdisc ingress "ingress" || return 1
        ingress
        sqm_debug "ingress shaping activated"
    else
        sqm_debug "ingress shaping deactivated"
        $TC qdisc del dev ${DEV} root 2> /dev/null
        $TC qdisc del dev ${IFACE} ingress 2> /dev/null
    fi

    return 0
}
